{"ast":null,"code":"import React from 'react';\nimport './FrontCard.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FrontCard({\n  username,\n  cardnumber,\n  month,\n  year,\n  confirm,\n  setConfirm\n}) {\n  const firstFour = document.getElementById('first');\n  const secondFour = document.getElementById('second');\n  const thirdFour = document.getElementById('third');\n  const fourthFour = document.getElementById('fourth');\n  const name = document.getElementById('name');\n  const mon = document.getElementById('month');\n  const yr = document.getElementById('year');\n  let number = cardnumber;\n  let arr = [fourthFour, thirdFour, secondFour, firstFour];\n  if (confirm) {\n    name.innerText = username.toUpperCase();\n    for (let i = 0; i < arr.length; i++) {\n      if ((\"\" + number % 10000).length === 4) {\n        arr[i].innerText = number % 10000;\n        number = Math.floor(number / 10000);\n        continue;\n      }\n      if ((\"\" + number % 10000).length === 3) {\n        arr[i].innerText = \"0\" + number % 10000;\n        number = Math.floor(number / 10000);\n        continue;\n      }\n      if ((\"\" + number % 10000).length === 2) {\n        arr[i].innerText = \"00\" + number % 10000;\n        number = Math.floor(number / 10000);\n        continue;\n      }\n      if ((\"\" + number % 10000).length === 1) {\n        arr[i].innerText = \"000\" + number % 10000;\n        number = Math.floor(number / 10000);\n        continue;\n      }\n    }\n    mon.innerText = month;\n    yr.innerText = year;\n    setConfirm(false);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c = FrontCard;\nexport default FrontCard;\nvar _c;\n$RefreshReg$(_c, \"FrontCard\");","map":{"version":3,"names":["React","ToastContainer","toast","Fragment","_Fragment","jsxDEV","_jsxDEV","FrontCard","username","cardnumber","month","year","confirm","setConfirm","firstFour","document","getElementById","secondFour","thirdFour","fourthFour","name","mon","yr","number","arr","innerText","toUpperCase","i","length","Math","floor","_c","$RefreshReg$"],"sources":["/home/shivam/Desktop/WEBdev/REACT/Credit-Card_Generator/src/components/FrontCard.js"],"sourcesContent":["import React from 'react';\nimport './FrontCard.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction FrontCard({username,cardnumber,month,year,confirm,setConfirm}) {\n  const firstFour=document.getElementById('first')\n  const secondFour=document.getElementById('second')\n  const thirdFour=document.getElementById('third')\n  const fourthFour=document.getElementById('fourth')\n  const name=document.getElementById('name')\n  const mon=document.getElementById('month')\n  const yr=document.getElementById('year')\n  let number=cardnumber;\n  \n  let arr=[fourthFour,thirdFour,secondFour,firstFour];\n\n  if(confirm){\n      name.innerText=username.toUpperCase();\n      \n      for(let i=0;i<arr.length;i++){\n          if((\"\"+(number%10000)).length===4){\n              arr[i].innerText=number%10000;\n              number=Math.floor((number/10000));\n              continue;\n          }\n          if((\"\"+(number%10000)).length===3){\n            arr[i].innerText=\"0\" + number%10000;\n            number=Math.floor((number/10000));\n            continue;\n          }\n          if((\"\"+(number%10000)).length===2){\n            arr[i].innerText=\"00\"+ number%10000;\n            number=Math.floor((number/10000));\n            continue;\n          }\n          if((\"\"+(number%10000)).length===1){\n            arr[i].innerText=\"000\"+number%10000;\n            number=Math.floor((number/10000));\n            continue;\n          }\n      }\n      \n\n      mon.innerText=month\n      yr.innerText=year\n      setConfirm(false);\n  }\n  \n\n  return (\n    <>\n    </>\n  )\n}\n\nexport default FrontCard"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG/C,SAASC,SAASA,CAAC;EAACC,QAAQ;EAACC,UAAU;EAACC,KAAK;EAACC,IAAI;EAACC,OAAO;EAACC;AAAU,CAAC,EAAE;EACtE,MAAMC,SAAS,GAACC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAChD,MAAMC,UAAU,GAACF,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAClD,MAAME,SAAS,GAACH,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAChD,MAAMG,UAAU,GAACJ,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAClD,MAAMI,IAAI,GAACL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;EAC1C,MAAMK,GAAG,GAACN,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC1C,MAAMM,EAAE,GAACP,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;EACxC,IAAIO,MAAM,GAACd,UAAU;EAErB,IAAIe,GAAG,GAAC,CAACL,UAAU,EAACD,SAAS,EAACD,UAAU,EAACH,SAAS,CAAC;EAEnD,IAAGF,OAAO,EAAC;IACPQ,IAAI,CAACK,SAAS,GAACjB,QAAQ,CAACkB,WAAW,CAAC,CAAC;IAErC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,GAAG,CAACI,MAAM,EAACD,CAAC,EAAE,EAAC;MACzB,IAAG,CAAC,EAAE,GAAEJ,MAAM,GAAC,KAAM,EAAEK,MAAM,KAAG,CAAC,EAAC;QAC9BJ,GAAG,CAACG,CAAC,CAAC,CAACF,SAAS,GAACF,MAAM,GAAC,KAAK;QAC7BA,MAAM,GAACM,IAAI,CAACC,KAAK,CAAEP,MAAM,GAAC,KAAM,CAAC;QACjC;MACJ;MACA,IAAG,CAAC,EAAE,GAAEA,MAAM,GAAC,KAAM,EAAEK,MAAM,KAAG,CAAC,EAAC;QAChCJ,GAAG,CAACG,CAAC,CAAC,CAACF,SAAS,GAAC,GAAG,GAAGF,MAAM,GAAC,KAAK;QACnCA,MAAM,GAACM,IAAI,CAACC,KAAK,CAAEP,MAAM,GAAC,KAAM,CAAC;QACjC;MACF;MACA,IAAG,CAAC,EAAE,GAAEA,MAAM,GAAC,KAAM,EAAEK,MAAM,KAAG,CAAC,EAAC;QAChCJ,GAAG,CAACG,CAAC,CAAC,CAACF,SAAS,GAAC,IAAI,GAAEF,MAAM,GAAC,KAAK;QACnCA,MAAM,GAACM,IAAI,CAACC,KAAK,CAAEP,MAAM,GAAC,KAAM,CAAC;QACjC;MACF;MACA,IAAG,CAAC,EAAE,GAAEA,MAAM,GAAC,KAAM,EAAEK,MAAM,KAAG,CAAC,EAAC;QAChCJ,GAAG,CAACG,CAAC,CAAC,CAACF,SAAS,GAAC,KAAK,GAACF,MAAM,GAAC,KAAK;QACnCA,MAAM,GAACM,IAAI,CAACC,KAAK,CAAEP,MAAM,GAAC,KAAM,CAAC;QACjC;MACF;IACJ;IAGAF,GAAG,CAACI,SAAS,GAACf,KAAK;IACnBY,EAAE,CAACG,SAAS,GAACd,IAAI;IACjBE,UAAU,CAAC,KAAK,CAAC;EACrB;EAGA,oBACEP,OAAA,CAAAF,SAAA,mBACE,CAAC;AAEP;AAAC2B,EAAA,GAjDQxB,SAAS;AAmDlB,eAAeA,SAAS;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}